plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

dependencies {
    api(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.35')
}

// add all modules from all layers with all transitive dependencies to provided
parent.configurations.layerModules.resolvedConfiguration.firstLevelModuleDependencies.each({
    it.children.each { module ->
            project.dependencies.add('provided', module.name)
    }
})

moduleInfo {
    enabled = false
}
docIgnore = true

ext {
    includePathsParent = [
            'de',
            'com',
            'com/codahale',
            'com/github',
            'com/google',
            'com/sun',
            'io',
            'javax',
            'javax/ws',
            'net/sf',
            'org',
            'org/apache',
            'org/codehaus',
            'org/eclipse',
            'org/yaml',
            'org/threeten',
            'org/relaxng',
            'us',

    ]
    includePaths = [
            'de/ii',
            'com/codahale/metrics',
            'com/github/benmanes',
            'com/fasterxml',
            'com/google/common',
            'com/networknt',
            'com/sun/xml',
            'dagger',
            'io/dropwizard',
            'io/swagger',
            'javax/servlet',
            'javax/ws/rs',
            //'javax/xml',
            'net/sf/jsqlparser',
            'org/apache/commons',
            'org/apache/hc',
            'org/codehaus/stax2',
            'org/codehaus/staxmate',
            'org/eclipse/jetty',
            'org/yaml/snakeyaml',
            'org/commonmark',
            'org/postgresql',
            'org/sqlite',
            'org/threeten/extra',
            'org/relaxng/datatype',
            'schemacrawler',
            'us/fatehi',
    ]
}

tasks.jar {
    onlyIf { false }
}

tasks.shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.provided]
    include '**/*.jar'
    include {
        it.isDirectory() && (includePathsParent.contains(it.path) || includePaths.any { path -> it.path.startsWith(path) })
    }
    include {
        it.name.endsWith('.class') && includePaths.any { path -> it.path.startsWith(path) }
    }
    include {
        it.path.startsWith('json-schema/entities') || it.name.endsWith('jsv-messages.properties')
                || it.name.endsWith('sql2003_reserved_words.txt') || it.name.endsWith('SchemaCrawler.txt') || it.name.endsWith('schemacrawler-postgresql.config.properties') || it.name.endsWith('schemacrawler-sqlite.config.properties')
                || it.path.endsWith('Mac/aarch64/libsqlitejdbc.dylib') || it.path.endsWith('Linux/x86_64/libsqlitejdbc.so') || it.path.endsWith('Linux/aarch64/libsqlitejdbc.so') || it.path.endsWith('Windows/x86_64/sqlitejdbc.dll') || it.path.endsWith('native-image.properties') || it.path.contains('SqliteJdbcFeature')
                || it.path.contains('com/sun/xml/xsom/impl/parser') || it.name.endsWith('.xsd') || it.name.endsWith('.rng')
    }
    minimize()
    relocate('com.', 'shadow.com.')
    relocate('dagger.', 'shadow.dagger.')
    relocate('io.', 'shadow.io.')
    relocate('javax.servlet.', 'shadow.javax.servlet.')
    relocate('javax.ws.rs.', 'shadow.javax.ws.rs.')
    relocate('org.', 'shadow.org.') {
        exclude 'org.slf4j.*'
        exclude 'org.slf4j.event.*'
        exclude 'org.w3c.dom.*'
        exclude 'org.sqlite.**'
        exclude 'org.xml.sax.**'
        exclude 'org.graalvm.**'
    }
    relocate('schemacrawler.', 'shadow.schemacrawler.')
    relocate('us.', 'shadow.us.')
}

//needed for sqlite in native image builds
jar {
    manifest {
        attributes('Multi-Release': 'true')
    }
}

artifacts {
    archives tasks.shadowJar
}

publishing {
    publications.named('default').configure {
        setArtifacts([tasks.shadowJar])
        pom.withXml {
            asNode().dependencies.'*'.findAll() {
                it.optional.text() == 'true'
            }.each {
                it.parent().remove(it)
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.register('schemaExtract', de.interactive_instruments.xtraplatform.docs.JsonSchemaTask) {
    dependsOn project.parent.tasks.jar
    docsName 'entities'
}