        </div>

        <footer class="footer bg-light py-4 d-flex flex-column justify-content-around align-items-center">
            {{#htmlConfig}}
            {{#footerText}}
                <div class="container text-muted text-center">
                    {{{.}}}
                </div>
            {{/footerText}}
            {{/htmlConfig}}
	        <div class="container d-flex flex-row justify-content-between align-items-center w-100">
	            {{> brand}}
                <span>
                {{#htmlConfig}}
                {{#legalUrl}}
                    <span><a class="small mr-2" href="{{.}}" target="_blank">{{legalName}}</a></span>
                {{/legalUrl}}
                {{#privacyUrl}}
                    <span><a class="small" href="{{.}}" target="_blank">{{privacyName}}</a></span>
                {{/privacyUrl}}
                {{/htmlConfig}}
                </span>
	        </div>
        </footer>

    </body>

    {{#withOlMap}}
    <script>
        const template = "{{{tilesUrl}}}";

        proj4.defs('EPSG:25832', '+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');
        proj4.defs('EPSG:3395', '+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs');
        ol.proj.proj4.register(proj4);
        ol.proj.get('EPSG:25832').setExtent([-46133.17, 5048875.268576, 1206211.101424, 6301219.54]);
        ol.proj.get('EPSG:3395').setExtent([-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244]);
        var baseLayer = new ol.layer.Tile({
                            source: new ol.source.XYZ({
                                attributions: window._ldproxy.ol_map.attribution,
                                url: window._ldproxy.ol_map.url
                            })
                        });
        var map = new ol.Map({
            target: 'map-container',
                    view: new ol.View({
                        projection: 'EPSG:3857',
                    }),
                    layers: [ baseLayer ]
        });

        var info = document.getElementById('info');
        map.on('pointermove', showInfo);

        var xyzTemplate = document.getElementById('xyzTemplate');
        var howToUse = document.getElementById('howToUse');

      {{#tileCollections}}
        var tilesUrl{{tileMatrixSet}} = template.replace("{tileMatrixSetId}","{{tileMatrixSet}}").replace("{tileMatrix}","{z}").replace("{tileRow}","{y}").replace("{tileCol}","{x}")

        var maxLevel{{tileMatrixSet}} = {{maxLevel}};
        var resolutions{{tileMatrixSet}} = {{resolutions}};

        var sizes{{tileMatrixSet}} = {{sizes}};

        var tileGrid{{tileMatrixSet}} = new ol.tilegrid.TileGrid({
            extent: {{extent}},
            resolutions: resolutions{{tileMatrixSet}},
            sizes: sizes{{tileMatrixSet}}
        });

		var tilesUrl{{tileMatrixSet}} = template.replace("{tileMatrixSetId}","{{tileMatrixSet}}").replace("{tileMatrix}","{z}").replace("{tileRow}","{y}").replace("{tileCol}","{x}");

        {{#tileJsonLink}}
		var tileJsonUrl{{tileMatrixSet}} = "{{.}}?f=tilejson".replace("{tileMatrixSetId}","{{tileMatrixSet}}");
        {{/tileJsonLink}}

		var view{{tileMatrixSet}} = new ol.View({
							projection: '{{projection}}'
						});

        {{#isVector}}
		var layer{{tileMatrixSet}} = new ol.layer.VectorTile({
								declutter: true,
								title: "Vector Tiles",
								source: new ol.source.VectorTile({
									format: new ol.format.MVT(),
									maxZoom: maxLevel{{tileMatrixSet}},
									projection: '{{projection}}',
									tileGrid: tileGrid{{tileMatrixSet}},
									url: tilesUrl{{tileMatrixSet}}
								})
							});
        {{/isVector}}
        {{^isVector}}
		var layer{{tileMatrixSet}} = new ol.layer.Tile({
								title: "Map Tiles",
								source: new ol.source.XYZ({
									maxZoom: maxLevel{{tileMatrixSet}},
									projection: '{{projection}}',
									tileGrid: tileGrid{{tileMatrixSet}},
									url: tilesUrl{{tileMatrixSet}}
								})
							});
        {{/isVector}}
        const extent{{tileMatrixSet}} = ol.proj.transformExtent(window._ldproxy.ol_map.extent, 'EPSG:4326', '{{projection}}');
        const center{{tileMatrixSet}} = ol.proj.fromLonLat([ {{defaultCenterLon}}, {{defaultCenterLat}} ], '{{projection}}');
		const zoom{{tileMatrixSet}} = {{defaultZoomLevel}};

    {{/tileCollections}}
    {{^tileCollections}}
         var tilesUrl = template.replace("{tileMatrixSetId}","WebMercatorQuad").replace("{tileMatrix}","{z}").replace("{tileRow}","{y}").replace("{tileCol}","{x}")
         var map = new ol.Map({
            target: 'map-container',
                    view: new ol.View({
                    }),
                    layers: [
                        new ol.layer.Tile({
                            source: new ol.source.XYZ({
                                attributions: window._ldproxy.ol_map.attribution,
                                url: window._ldproxy.ol_map.url
                            })
                        }),
                        {{#isVector}}
                        new ol.layer.VectorTile({
                            declutter: true,
                            title: "Vector Tiles",
                            source: new ol.source.VectorTile({
                                format: new ol.format.MVT(),
                                url: tilesUrl
                            })
                        })
                        {{/isVector}}
                        {{^isVector}}
                        new ol.layer.Tile({
                            title: "Map Tiles",
                            source: new ol.source.XYZ({
                                url: tilesUrl
                            })
                        })
                        {{/isVector}}
                    ]
        });
        const extent = ol.proj.transformExtent(window._ldproxy.ol_map.extent, 'EPSG:4326', 'EPSG:3857');
        map.getView().fit(extent, map.getSize());

        map.on('pointermove', showInfo);
        var info = document.getElementById('info');
        function showInfo(event) {
            var features = map.getFeaturesAtPixel(event.pixel);
            if (!features) {
                info.innerText = '';
                info.style.opacity = 0;
                return;
            }
            if (features[0]) {
                var id = features[0].getId();
                var properties = features[0].getProperties();
                if (id) {
                    properties.id = id;
                }
                info.innerText = JSON.stringify(properties, null, 2);
                info.style.opacity = 1;
            }
        }
    {{/tileCollections}}

		setTilingScheme();

		function setTilingScheme() {
		  var val = document.getElementById("tilingScheme").value;
    {{#tileCollections}}
		  if (val === "{{tileMatrixSet}}") {
			map.setView(view{{tileMatrixSet}});
			map.getLayers().setAt(1, layer{{tileMatrixSet}});
			map.getView().setCenter(center{{tileMatrixSet}})
			map.getView().setZoom(zoom{{tileMatrixSet}});
            tilejson.href = tileJsonUrl{{tileMatrixSet}};
            xyzTemplate.innerText = tilesUrl{{tileMatrixSet}};
		  }
    {{/tileCollections}}
          if (val === "WebMercatorQuad") {
            howToUse.style.display = "block";
          } else {
            howToUse.style.display = "none";
          };
		  info.innerText = '';
		  info.style.opacity = 0;
		}

        function showInfo(event) {
            var features = map.getFeaturesAtPixel(event.pixel);
            if (!features) {
                info.innerText = '';
                info.style.opacity = 0;
                return;
            }
            if (features[0]) {
                var id = features[0].getId();
                var properties = features[0].getProperties();
                if (id) {
                    properties.id = id;
                }
                info.innerText = JSON.stringify(properties, null, 2);
                info.style.opacity = 1;
            }
        }
    </script>
    {{/withOlMap}}
</html>
