import java.util.regex.Pattern

subprojects {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        // optional: limit format enforcement to just the files changed by this feature branch
        //ratchetFrom 'origin/master'

        java {
            targetExclude '**/build/generated/**/*'

            googleJavaFormat('1.15.0')

            bumpThisNumberIfACustomStepChanges(2)
            custom("errorOnWildcard", {
                def matcher = Pattern.compile("^(.*?)\\.\\*;\$", Pattern.MULTILINE).matcher(it)
                if (matcher.find()) {
                    throw new WildcardError(matcher.group())
                }
                return it
            })

            // make sure every file has the following copyright header.
            licenseHeader '''/*
 * Copyright $YEAR interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
'''
        }
    }
}

class WildcardError extends AssertionError {
    WildcardError(String var1) {
        super((Object) "Wildcard imports are not allowed: ${var1}");
    }

    @Override
    StackTraceElement[] getStackTrace() {
        return []
    }

    @Override
    String toString() {
        return ""
    }
}
