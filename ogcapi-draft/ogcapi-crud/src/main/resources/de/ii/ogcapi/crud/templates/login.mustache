<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="noindex" />
  <title>{{title}}</title>
  <meta name="description" content="{{description}}">
  {{#keywords}}
    <meta name="keywords" content="{{.}}">
  {{/keywords}}

  {{#canonicalUrl}}<link rel="canonical" href="{{.}}"/>{{/canonicalUrl}}

</head>

<body style="height: 100vh;">

<script type="module">
  import * as oauth from 'https://unpkg.com/oauth4webapi@1.2.1';

  const currentUrl = new URL(window.location.href);
  const oidcUrl = new URL('{{oidcUri}}');
  const issuer = new URL('{{authUri}}');
  const callbackUrl ='{{callbackUri}}';

  const as = await oauth
    .discoveryRequest(oidcUrl)
    .then((response) => oauth.processDiscoveryResponse(issuer, response))

  const client = {
    client_id: 'CnqJp4tH9F883TGwwxSBoWpAazwa',
    client_secret:
      'TPja7YBqKCfvoL3ryGV6Qbacnrsa',
    token_endpoint_auth_method: 'client_secret_basic',
  }

  const code_verifier = '1V5Zf42ZNxFz6klXwBtrW4fEUfccpLtRTxunky9omNE';// oauth.generateRandomCodeVerifier()
  const code_challenge = await oauth.calculatePKCECodeChallenge(code_verifier)
  const code_challenge_method = 'S256'

{{^callback}}
  // redirect user to as.authorization_endpoint

  const authorizationUrl = new URL(as.authorization_endpoint)
  authorizationUrl.searchParams.set('client_id', client.client_id)
  authorizationUrl.searchParams.set('code_challenge', code_challenge)
  authorizationUrl.searchParams.set('code_challenge_method', code_challenge_method)
  authorizationUrl.searchParams.set('redirect_uri', callbackUrl)
  authorizationUrl.searchParams.set('response_type', 'code')
  authorizationUrl.searchParams.set('scope', 'openid')
  authorizationUrl.searchParams.set('prompt', 'login')

  console.log(authorizationUrl.toString());
  console.log(authorizationUrl.searchParams);

  window.location = authorizationUrl;
{{/callback}}

{{#callback}}
  const parameters = oauth.validateAuthResponse(as, client, currentUrl, oauth.expectNoState)
  if (oauth.isOAuth2Error(parameters)) {
    console.log('error', parameters)
    throw new Error() // Handle OAuth 2.0 redirect error
  }

  const response = await oauth.authorizationCodeGrantRequest(
    as,
    client,
    parameters,
    callbackUrl,
    code_verifier,
  )

  let challenges
  if ((challenges = oauth.parseWwwAuthenticateChallenges(response))) {
    for (const challenge of challenges) {
      console.log('challenge', challenge)
    }
    throw new Error() // Handle www-authenticate challenges as needed
  }

  const result = await oauth.processAuthorizationCodeOpenIDResponse(as, client, response)
  if (oauth.isOAuth2Error(result)) {
    console.log('error', result)
    throw new Error() // Handle OAuth 2.0 response body error
  }

  console.log('result', result)

  const redirectUrl = new URL('{{redirectUri}}')
  redirectUrl.searchParams.set('access_token', result.access_token)
  redirectUrl.searchParams.set('code', result.id_token)

  window.location = redirectUrl;
{{/callback}}

</script>


</body>

{{> htmlEnd}}
