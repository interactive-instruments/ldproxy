<!DOCTYPE html>
<html style="font-size: small;">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="noindex" />
  <title>{{title}}</title>
  <meta name="description" content="{{description}}">
  {{#keywords}}
    <meta name="keywords" content="{{.}}">
  {{/keywords}}

  {{#canonicalUrl}}<link rel="canonical" href="{{.}}"/>{{/canonicalUrl}}

  <link
      rel="stylesheet"
      href="https://openlayers.org/en/v6.14.1/css/ol.css"
  />
  <link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="h-screen" style="font-size: small;">

<div id="map" class="w-full h-full">
</div>

{{> mapClient2}}

<script src="https://openlayers.org/en/v6.14.1/build/ol.js"></script>
<script src="{{urlPrefix}}/ogcapi-crud/assets/ol-ogc-api-crud-40933f2a.js"></script>

<script type="text/javascript">

const styles = {
  Point: new ol.style.Style({
    image: new ol.style.Circle({
      radius: 5,
      fill: new ol.style.Fill({
        color: "red",
      }),
    }),
  }),
  LineString: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "red",
        width: 2,
      }),
    }),
    new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        fill: new ol.style.Fill({
          color: "red",
        }),
      }),
      geometry: function (feature) {
        // return the coordinates of the first ring of each polygon
        const coordinates = feature
          .getGeometry()
          .getCoordinates()
          .reduce((prev, curr) => prev.concat(curr), []);
        return new ol.geom.MultiPoint(coordinates);
      },
    }),
  ],
  MultiLineString: new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: "red",
      width: 2,
    }),
  }),
  MultiPoint: new ol.style.Style({
    image: new ol.style.Circle({
      radius: 5,
      fill: null,
      stroke: new ol.style.Stroke({ color: "red", width: 1 }),
    }),
  }),
  MultiPolygon: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "red",
        lineDash: [5],
        width: 3,
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.5)",
      }),
    }),
    new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        fill: new ol.style.Fill({
          color: "red",
        }),
      }),
      geometry: function (feature) {
        // return the coordinates of the first ring of each polygon
        const coordinates = feature
          .getGeometry()
          .getCoordinates()
          .reduce((prev, curr) => prev.concat(curr[0]), []);
        return new ol.geom.MultiPoint(coordinates);
      },
    }),
  ],
  Polygon: [
    new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "red",
        lineDash: [5],
        width: 3,
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.5)",
      }),
    }),
    new ol.style.Style({
      image: new ol.style.Circle({
        radius: 5,
        fill: new ol.style.Fill({
          color: "red",
        }),
      }),
      geometry: function (feature) {
        // return the coordinates of the first ring of each polygon
        const coordinates = feature
          .getGeometry()
          .getCoordinates()
          .reduce((prev, curr) => prev.concat(curr[0]), []);
        return new ol.geom.MultiPoint(coordinates);
      },
    }),
  ],
  GeometryCollection: new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: "magenta",
      width: 2,
    }),
    fill: new ol.style.Fill({
      color: "magenta",
    }),
    image: new ol.style.Circle({
      radius: 10,
      fill: null,
      stroke: new ol.style.Stroke({
        color: "magenta",
      }),
    }),
  }),
  Circle: new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: "red",
      width: 2,
    }),
    fill: new ol.style.Fill({
      color: "rgba(255,0,0,0.2)",
    }),
  }),
};

const styleFunction = (feature) => {
  return styles[feature.getGeometry().getType()];
};

const collectionId = Object.keys(globalThis._map.dataLayers)[0];

const crs84 = new ol.proj.Projection({
      code: "EPSG:4326",
      axisOrientation: "neu",
    });

const vectorSource = new ol.source.Vector({
  format: new ol.format.GeoJSON({
    dataProjection: crs84,
  }),
  loader: function (extent, resolution, projection, onSuccess, onError) {
    const url =
      `${globalThis._map.dataUrl}/collections/${collectionId}/items` +
      "?f=json&limit=1000&" +
      "bbox=" +
      extent[0] +
      "," +
      extent[1] +
      "," +
      extent[2] +
      "," +
      extent[3] +
      "&bbox-crs=" +
      encodeURIComponent("http://www.opengis.net/def/crs/EPSG/0/3857");

    fetch(url).then((response) => {
      return response.ok
        ? response.json().then((json) => {
            var features = vectorSource
              .getFormat()
              .readFeatures(json, { featureProjection: "EPSG:3857" });
            vectorSource.addFeatures(features);
            onSuccess(features);
          })
        : response
            .text()
            .then((text) =>
              onError(`${response.status} ${response.statusText} - ${text}`)
            );
    });
  },
  strategy: ol.loadingstrategy.tile(
    ol.tilegrid.createXYZ({
      tileSize: 512,
    })
  ),
});

var map = new ol.Map({
  target: "map",
  layers: [
    new ol.layer.Tile({
      source: new ol.source.XYZ({
        attributions: `${globalThis._map.attribution}`,
        url: `${globalThis._map.backgroundUrl}`,
      }),
    }),
    new ol.layer.Vector({
      source: vectorSource,
      properties: { sourceId: collectionId },
      sourceId: collectionId,
    }),
  ],
  view: new ol.View({
    center: ol.proj.transform(ol.extent.getCenter(globalThis._map.bounds.flat(1)), "EPSG:4326", "EPSG:3857"),
    zoom: 8,
  }),
});

var ogcApiEditor = new OgcApiEditor({
  baseUrl: globalThis._map.dataUrl,
  collections: { [collectionId]: { id: collectionId } },
  styleFunction,
  vectorSource,
});
ogcApiEditor.addToMap(map);


</script>


</body>

{{> htmlEnd}}