plugins {
    id 'de.interactive_instruments.xtraplatform-application' version '4.1.0-SNAPSHOT'
    id 'com.github.hierynomus.license-report' version '0.16.1' apply false
    id 'com.bmuschko.docker-java-application' version '3.1.0' apply false
}

allprojects {
    group = 'de.interactive_instruments'
}

apply from: 'version.gradle'

apply from: 'xtraplatform.gradle'

dependencies {
    // layers to include in this application
    layers group: 'de.interactive_instruments', name: 'ogcapi-stable'
    layers group: 'de.interactive_instruments', name: 'ogcapi-draft'


    // modules to include in this application
    modules subprojects.findAll {it.name != 'ldproxy-cfg'}
}

ext {
    useNativeRun = org.gradle.internal.os.OperatingSystem.current().isLinux()
            ? project.findProperty('runInDocker') != 'true'
            : project.findProperty('runInDocker') == 'false'
}

tasks.run {
    debug = project.findProperty('debug') ?: false
    args = project.findProperty('data') ? [project.findProperty('data')] : args
    onlyIf {useNativeRun}
    doFirst {
        println "useNativeRun: ${useNativeRun}, isLinux: ${org.gradle.internal.os.OperatingSystem.current().isLinux()}, runInDocker: ${project.findProperty('runInDocker')}"
        if (useNativeRun && !org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            logger.warn("WARNING: Running natively is not supported for '${System.getProperty("os.name")}' and will most likely lead to errors.")
        }
    }
}

tasks.test {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':testAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':testAll')
    dependsOn(':ldproxy-cfg:test')
}

tasks.check {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':checkAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':checkAll')
    dependsOn(':ldproxy-cfg:check')
}

tasks.publish {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':publish')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':publish')
    dependsOn(':ldproxy-cfg:publish')
}

apply from: 'license-headers.gradle'

apply from: 'docker.gradle'

//apply from: 'license-report.gradle'

//apply plugin: 'xtraplatform-docs'

apply from: 'git-hooks.gradle'

