plugins {
    alias catalog.plugins.xtraplatform.application
    alias catalog.plugins.spotless apply false
    alias catalog.plugins.node apply false
    alias catalog.plugins.download apply false
}

allprojects {
    group = 'de.interactive_instruments'
}

apply from: 'version.gradle'

apply from: 'xtraplatform.gradle'

apply from: 'formatting.gradle'

dependencies {
    // layers to include in this application
    layers group: 'de.interactive_instruments', name: 'ogcapi-stable'
    layers group: 'de.interactive_instruments', name: 'ogcapi-draft'
    layers group: 'de.interactive_instruments', name: 'ogcapi-custom'


    // modules to include in this application
    modules subprojects.findAll {it.name != 'ldproxy-cfg'}
}

cyclonedxBom {
    skipProjects = ["ldproxy-cfg"]
}

tasks.test {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':testAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':testAll')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':testAll')
    dependsOn(':ldproxy-cfg:test')
}

tasks.check {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':checkAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':checkAll')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':checkAll')
    dependsOn(':ldproxy-cfg:check')
}

tasks.publish {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':publish')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':publish')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':publish')
    dependsOn(':ldproxy-cfg:publish')
}

tasks.clean {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':cleanAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':cleanAll')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':cleanAll')
    dependsOn(':ldproxy-cfg:clean')
}

task spotlessApply {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':spotlessApplyAll')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':spotlessApplyAll')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':spotlessApplyAll')
    dependsOn(':ldproxy-cfg:spotlessApply')
}

tasks.modules {
    dependsOn project.gradle.includedBuild('ogcapi-stable').task(':modules')
    dependsOn project.gradle.includedBuild('ogcapi-draft').task(':modules')
    dependsOn project.gradle.includedBuild('ogcapi-custom').task(':modules')
}

//TODO: MarkdownTask not available in docs.gradle
tasks.register('docsExtract', de.interactive_instruments.xtraplatform.docs.MarkdownTask) {
    docsName 'docs'
}

// To pass additional environment variables into the docker container, put a comma separated list
// of variable names into parameter -PenvDocker or a gradle.properties file, e.g. -PenvDocker=VAR1,VAR2
tasks.named('dockerRun') {
    String envDocker = project.properties.getOrDefault("envDocker", "")
    List<String> vars = ['EXTERNAL_URL', 'DB_HOST'] + envDocker.tokenize(',')
    List<String> cl = vars.collectMany { ['-e', it] }

    commandLine = commandLine.plus(commandLine.size()-1, cl)
}

apply from: 'docs.gradle'
